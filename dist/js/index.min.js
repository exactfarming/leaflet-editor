!function(e){var t={};function o(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=e,o.c=t,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)o.d(r,i,function(t){return e[t]}.bind(null,i));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=20)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={changed:"editor:polygon_changed",start_add_new_polygon:"editor:start_add_new_polygon",start_add_new_hole:"editor:start_add_new_hole",marker_group_clear:"editor:marker_group_clear",join_path:"editor:__join_path",hole_created:"editor:polygon:hole_created",polygon_created:"editor:polygon:created",polygon_selected:"editor:polygon:selected",delete_marker:"editor:delete_marker",delete_polygon:"editor:delete_polygon",map_cleared:"editor:map_cleared",last_marker_dblclick_mouseover:"editor:last_marker_dblclick_mouseover",hole_deleted:"editor:polygon:hole_deleted",polygon_deleted:"editor:polygon:deleted",first_marker_mouseover:"editor:first_marker_mouseover",selected_middle_marker_mouseover:"editor:selected_middle_marker_mouseover",selected_marker_mouseover:"editor:selected_marker_mouseover",not_selected_marker_mouseover:"editor:not_selected_marker_mouseover",marker_mouseout:"editor:marker_mouseout",drag_marker:"editor:drag_marker",dragend_marker:"editor:dragend_marker",marker_dragstart:"editor:marker_dragstart",edit_polygon_mousemove:"editor:edit_polygon_mousemove",edit_polygon_mouseover:"editor:edit_polygon_mouseover",edit_polygon_mouseout:"editor:edit_polygon_mouseout",delete_hole:"editor:delete_hole",before_add_marker:"editor:before_add_marker",add_marker:"editor:add_marker",add_hole_marker:"editor:add_hole_marker",marker_group_select:"editor:marker_group_select",view_polygon_mousemove:"editor:view_polygon_mousemove",view_polygon_mouseout:"editor:view_polygon_mouseout"}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.middleSelectedIcon=t.middleIcon=t.dragIcon=t.icon=t.firstIcon=void 0;var r,i=o(3),n=(r=i)&&r.__esModule?r:{default:r};var s=1;navigator.userAgent.toLowerCase();n.default.isMobileBrowser()&&(s=2);t.firstIcon=L.divIcon({className:"m-editor-div-icon-first",iconSize:[10*s,10*s]}),t.icon=L.divIcon({className:"m-editor-div-icon",iconSize:[10*s,10*s]}),t.dragIcon=L.divIcon({className:"m-editor-div-icon-drag",iconSize:[10*s*3,10*s*3]}),t.middleIcon=L.divIcon({className:"m-editor-middle-div-icon",iconSize:[10*s,10*s]}),t.middleSelectedIcon=L.divIcon({className:"m-editor-middle-div-icon group-selected",iconSize:[10*s,10*s]})},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(o(9)),i=s(o(0)),n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t}(o(1));function s(e){return e&&e.__esModule?e:{default:e}}L.MarkerGroup=r.default.extend({_isHole:!1,_position:null,options:{mIcon:null,mHoverIcon:null},initialize:function(e){L.LayerGroup.prototype.initialize.call(this,e),this._markers=[]},onAdd:function(e){this._map=e},onRemove:function(){this._map.off("mousemove")},_updateDELine:function(e){var t=this.getDELine();return this._firstMarker&&t.update(e),t},getDELine:function(){return this._map.dashedEditLineGroup},hasMinimalMarkersLength:function(){return this.getLayers().filter(function(e){return e._icon.classList.contains("m-editor-div-icon")&&!e._icon.classList.contains("m-editor-middle-div-icon")}).length<=3},setSelected:function(e){var t=this._map;if(this.hasFirstMarker())return t.setSelectedMarker(this.getLast()),void(t._oldSelectedMarker=t._selectedMarker);t._oldSelectedMarker=t._selectedMarker,t.setSelectedMarker(e)},getFirst:function(){return this._firstMarker},getLast:function(){if(this.hasFirstMarker()){var e=this.getLayers();return e[e.length-1]}},hasFirstMarker:function(){return!(!this.getFirst()||!this.getFirst()._hasFirstIcon())},restore:function(e){var t,o=this;if(e._latlngs[0][0]instanceof L.LatLng){if(e._latlngs&&this.setAll(e._latlngs[0]),e._latlngs[1]){var r=(t=e._latlngs,Array.isArray(t)?t:Array.from(t)),i=(r[0],r.slice(1));this.setAllHoles(i)}}else e._latlngs[0][0][0]instanceof L.LatLng&&e._latlngs.forEach(function(e){o.restore({_latlngs:e})})},_add:function(e,t){var o=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this._map.isMode("draw")&&(this._firstMarker||(r.icon=n.firstIcon));var s=this.addMarker(e,t,r);return this.getDELine().addLatLng(e),this.getFirst()._hasFirstIcon()?this._map.on("mousemove",function(e){o._updateDELine(e.latlng)}):this.getDELine().clear(),s._mGroup.getLayers().length>2&&s._mGroup._firstMarker._hasFirstIcon()&&s===s._mGroup._lastMarker&&this._map.fire(i.default.last_marker_dblclick_mouseover,{marker:s}),s},setMiddleMarker:function(e){this.addMarker(e,null,{icon:n.middleSelectedIcon})},setMiddleMarkers:function(e){this.setMiddleMarker(e),this.setMiddleMarker(e+2)},set:function(e,t,o){return this._add(e,t,o)},setAll:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];t.forEach(function(t,o){e.set(t,o)}),t.length>0&&this.getFirst().fire("click")},setAllHoles:function(){var e=this;(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).forEach(function(t){var o=e._map.getEHMarkersGroup().addHoleGroup();t._each(function(e,t){o.set(e,t)}),o.getFirst().fire("click")})},_bindLineEvents:void 0});var a=L.MarkerGroup;t.default=a},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={isMobileBrowser:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.navigator,t=e.userAgent||e.vendor||window.opera,o=!1;return(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)))&&(o=!0),o}}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={forceToDraw:!0,notifyClickMarkerDeletePolygon:!1,translations:{removePolygon:"remove polygon",removePoint:"remove point"},style:{view:{opacity:.5,fillOpacity:.2,dashArray:null,clickable:!1,fill:!0,stroke:!0,color:"#0aaec9",weight:3},draw:{opacity:.5,fillOpacity:.2,dashArray:"5, 10",clickable:!0,fill:!0,stroke:!0,color:"#00cd00",weight:3},startDraw:{},drawLine:{opacity:.7,fill:!1,fillColor:"#00cd00",color:"#00cd00",weight:3,dashArray:"5, 10",stroke:!0,clickable:!1}},markerIcon:void 0,markerHoverIcon:void 0,errorLineStyle:{color:"red",weight:3,opacity:1,smoothFactor:1},previewErrorLineStyle:{color:"red",weight:3,opacity:1,smoothFactor:1,dashArray:"5, 10"},text:{removePolygon:"Remove polygon",acceptDeletion:"Click again to remove polygon",clickToEdit:"click to edit",clickToAddNewEdges:"<div>click&nbsp;&nbsp;<div class='m-editor-middle-div-icon static group-selected'></div>&nbsp;&nbsp;to add new edges</div>",clickToDrawInnerEdges:"click to draw inner edges",clickToJoinEdges:"click to join edges",clickToRemoveAllSelectedEdges:"<div>click&nbsp;&nbsp;&nbsp;&nbsp;<div class='m-editor-div-icon static group-selected'></div>&nbsp;&nbsp;to remove edge&nbsp;&nbsp;or<br>click&nbsp;&nbsp;<i class='fa fa-trash'></i>&nbsp;&nbsp;to remove all selected edges</div>",clickToSelectEdges:"<div>click&nbsp;&nbsp;&nbsp;&nbsp;<div class='m-editor-div-icon static'></div>&nbsp;/&nbsp;<div class='m-editor-middle-div-icon static'></div>&nbsp;&nbsp;to select edges</div>",dblclickToJoinEdges:"double click to join edges",clickToStartDrawPolygonOnMap:"click to start draw polygon on map",deleteSelectedEdges:"deleted selected edges",rejectChanges:"reject changes",jsonWasLoaded:"JSON was loaded",checkJson:"check JSON",loadJson:"load GeoJSON",forgetToSave:"Save changes by pressing outside of polygon",zoom:"Zoom"},worldCopyJump:!0,geoJSONArea:null}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(e[r]=o[r])}return e},i=h(o(6)),n=h(o(11)),s=h(o(4));o(13);var a=h(o(14)),l=h(o(15)),d=h(o(16)),c=h(o(2)),u=h(o(18)),_=h(o(19));function h(e){return e&&e.__esModule?e:{default:e}}var f=L.Map.extend({setLayers:function(){this.viewGroup=new a.default,this.editGroup=new l.default([]),this.editPolygon=new d.default,this.editMarkersGroup=new c.default([]),this.dashedEditLineGroup=new u.default,this.editHoleMarkersGroup=new _.default([]),this.viewGroup.addTo(this),this.editGroup.addTo(this),this.editPolygon.addTo(this),this.editMarkersGroup.addTo(this),this.dashedEditLineGroup.addTo(this),this.editHoleMarkersGroup.addTo(this)},removeLayers:function(){this.removeLayer(this.viewGroup),this.removeLayer(this.editGroup),this.removeLayer(this.editPolygon),this.removeLayer(this.editMarkersGroup),this.removeLayer(this.dashedEditLineGroup),this.removeLayer(this.editHoleMarkersGroup)},initialize:function(e,t){var o=this;this.viewGroup=null,this.editGroup=null,this.editPolygon=null,this.editMarkersGroup=null,this.dashedEditLineGroup=null,this.editHoleMarkersGroup=null,t.text&&(r(s.default.text,t.text),delete t.text);var i=t.controls;i&&!1===i.zoom&&(t.zoomControl=!1),t.style&&(t.style.draw&&r(s.default.style.draw,t.style.draw),t.style.view&&r(s.default.style.view,t.style.view),t.style.startDraw&&r(s.default.style.startDraw,t.style.startDraw),t.style.drawLine&&r(s.default.style.drawLine,t.style.drawLine),delete t.style),r(this.options,s.default,t),L.Map.prototype.initialize.call(this,e,t),this.whenReady(function(){o.setLayers()}),this.options.forceToDraw&&this.mode("draw"),this.on("unload",function(){o.removeControl(o.msgHelper),o.removeLayers()})},getVGroup:function(){return this.viewGroup},getEGroup:function(){return this.editGroup},getEPolygon:function(){return this.editPolygon},getEMarkersGroup:function(){return this.editMarkersGroup},getDELine:function(){return this.dashedEditLineGroup},getEHMarkersGroup:function(){return this.editHoleMarkersGroup},setSelectedMGroup:function(e){this._selectedMGroup=e},clearSelectedMGroup:function(){this._selectedMGroup=null},getSelectedMGroup:function(){var e=this._selectedMGroup;return e&&e._map?e:null},getCurrentGeoJSON:function(){var e=this,t=[];this.getVGroup().eachLayer(function(o){o!==e._getSelectedVLayer()&&t.push(o.toGeoJSON().geometry.coordinates)});var o=this.getEPolygon().toGeoJSON().geometry.coordinates;return o.length&&t.push(o),L.GeoJSON.getFeature(this,{type:"MultiPolygon",coordinates:t})}});f.include(i.default),f.addInitHook(n.default),t.default=f},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(e[r]=o[r])}return e},i=l(o(7)),n=o(8),s=l(o(0)),a=l(o(2));function l(e){return e&&e.__esModule?e:{default:e}}t.default=r({hasSelectedVLayer:function(){return void 0!==this._getSelectedVLayer()},_selectedMarker:void 0,_selectedVLayer:void 0,_oldSelectedMarker:void 0,_modeType:"draw",_activeEditLayer:void 0,_errorTimeout:null,mode:function(e){this["__mode_"+e]?(this._setModeType(e),this._clearEvents(),e=this["__mode_"+e]()||e,this._setMode(e)):console.error('Mode "'+e+'" is not defined')},isMode:function(e){return e===this._modeType},__mode_draw:function(){this._bindDrawEvents()},clear:function(){this._clearEvents(),this._clearMap(),this.fire(s.default.map_cleared)},saveState:function(){return this.getEPolygon().isEmpty()||(this._getSelectedVLayer()?this._setEPolygon_To_VGroup():this._addEPolygon_To_VGroup()),this.clear(),this.mode("draw"),{type:"MultiPolygon",coordinates:this.getVGroup().toGeoJSON().features.reduce(function(e,t){return[].concat(function(e){if(Array.isArray(e)){for(var t=0,o=Array(e.length);t<e.length;t++)o[t]=e[t];return o}return Array.from(e)}(e),[t.geometry.coordinates])},[])}},geoJSONArea:function(e){var t=this.options.geoJSONArea||window.turf&&window.turf.area;return t||console.warn('Warning: Implement "geoJSONArea" function ( leaflet-editor )'),t?t(e):0},area:function(){var e,t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).precLatLng,o=void 0===t?6:t,r=this.getVGroup(),i=this.getEPolygon(),s=this._getSelectedVLayer(),a=i.isEmpty()?0:this.geoJSONArea((0,n.precisionGeoJSON)(i.toGeoJSON(),o)),l=this.geoJSONArea((0,n.precisionGeoJSON)(r.toGeoJSON(),o)),d=s?this.geoJSONArea((0,n.precisionGeoJSON)(s.toGeoJSON(),o)):0;return this.hasSelectedVLayer()&&a>0&&(l-=d),e=a>0?l+a:l,(0,n.precision)(e,o)},getSelectedMarker:function(){return this._selectedMarker},clearSelectedMarker:function(){this._selectedMarker=null},setSelectedMarker:function(e){if(!e||!e._icon)throw new Error('Error in method "setSelectedMarker". Check marker instance');this._selectedMarker=e},removePolygon:function(e){this.getEMarkersGroup().clearLayers(),this.getEHMarkersGroup().clearLayers(),e.clear(),this.clearSelectedMarker(),this._setEPolygon_To_VGroup()},createEditPolygon:function(e){var t=this,o=L.geoJson(e);this._getSelectedVLayer()?this._setEPolygon_To_VGroup():this._addEPolygon_To_VGroup(),this.clear();var r=o.getLayers();return r.length>0&&r.forEach(function(e){var o=e.getLatLngs(),r=t.getVGroup();"MultiPolygon"===e.feature.geometry.type?o.forEach(function(e){r.addLayer(L.polygon(e,{className:"view-polygon"}))}):r.addLayer(L.polygon(o,{className:"view-polygon"}))}),this.mode("draw"),this._fitVBounds(),o},_getSelectedVLayer:function(){return this._selectedVLayer},_setSelectedVLayer:function(e){this._selectedVLayer=e},_clearSelectedVLayer:function(){this._selectedVLayer=void 0},_hideSelectedVLayer:function(e){e.bringToBack(),e&&(this._showSelectedVLayer(this._getSelectedVLayer()),this._setSelectedVLayer(e),e._path.style.visibility="hidden")},_showSelectedVLayer:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._selectedVLayer;e&&(e._path.style.visibility="")},_addEPolygon_To_VGroup:function(){var e=this.getVGroup(),t=this.getEPolygon().getLatLngs();t&&t[0]&&t[0].length<=2||e.addLayer(L.polygon(t,{className:"view-polygon"}))},_setEPolygon_To_VGroup:function(){var e=this.getEPolygon(),t=this._getSelectedVLayer();t&&(t._latlngs=e.getLatLngs(),t.redraw())},_convertToEdit:function(e){if(e instanceof a.default){var t=this.getEPolygon(),o=e.getLayers(),r=(o=o.filter(function(e){return!e.isMiddle()})).map(function(e){return e.getLatLng()}),i=t.getHoles();return i&&(r=[r].concat(i)),t.setLatLngs(r),t.redraw(),t}},_setMode:function(e){var t=this.options;this.getEPolygon().setStyle(t.style[e])},_setModeType:function(e){try{this._container.classList.remove("map-"+this._modeType),this._container.classList.add("map-"+this._modeType),this._modeType=e}catch(e){console.error('Check "_setModeType"')}},_fitVBounds:function(){0!==this.getVGroup().getLayers().length&&this.fitBounds(this.getVGroup().getBounds(),{padding:[30,30]})},_clearMap:function(){this.getEGroup().clearLayers(),this.getEPolygon().clear(),this.getEMarkersGroup().clear();var e=this.getSelectedMGroup();e&&e.getDELine().clear(),this.getEHMarkersGroup().clear(),this._activeEditLayer=void 0,this._showSelectedVLayer(),this._clearSelectedVLayer(),this.clearSelectedMarker()},_clearEvents:function(){this._unBindDrawEvents()},_moveEPolygonOnTop:function(){var e=this.getEPolygon()._container;e&&e.parentElement.insertAdjacentElement("beforeend",e)},_getGeometry:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e.geometry?e.geometry:e.features&&e.features[0]?this._getGeometry(e.features[0]):{}}},i.default)},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=o(1),n=o(0),s=(r=n)&&r.__esModule?r:{default:r};t.default={_bindDrawEvents:function(){var e=this;this._unBindDrawEvents(),this.on("click",function(t){if(!(t.originalEvent&&0===t.originalEvent.clientX&&0===t.originalEvent.clientY||t.target instanceof L.Marker)){var o=t.target.getEMarkersGroup();if(o.isEmpty()){e._addMarker(t),e.fire(s.default.start_add_new_polygon,t);var r=e.options.style.startDraw;return r&&e.getEPolygon().setStyle(r),e._clearSelectedVLayer(),e.setSelectedMGroup(o),!1}var n=o.getFirst();if(n&&n._hasFirstIcon())return t.target instanceof L.Marker||e._addMarker(t),!1;var a=e.getEHMarkersGroup(),l=a.getLastHole();if(n&&!n._hasFirstIcon()&&!(t.target.getEPolygon()._path!==t.originalEvent.target||l&&l.getFirst()&&l.getFirst()._hasFirstIcon())){e.clearSelectedMarker();var d=a.addHoleGroup();return d.set(t.latlng,null,{icon:i.firstIcon}),e.setSelectedMGroup(d),e.fire(s.default.start_add_new_hole),e.getEHMarkersGroup().resetSelection(),e.getEMarkersGroup().resetSelection(),!1}if(l&&!l.isEmpty()&&l.hasFirstMarker()){var c=a.getLastHole().set(t.latlng);return e.fire(s.default.add_hole_marker,{marker:c}),!1}e._getSelectedVLayer()?e._setEPolygon_To_VGroup():e._addEPolygon_To_VGroup(),e.clear(),e.fire(s.default.marker_group_clear),e.fire(s.default.changed,{json:e.saveState()}),e.mode("draw")}}),this.on(s.default.join_path,function(t){var o=t.mGroup;if(o){o._isHole&&e.getEHMarkersGroup().resetLastHole();var r=o.getLayers(),n=-1;r.forEach(function(){var e=o.addMarker(n,null,{icon:i.middleIcon});n=e.position+2}),o.getDELine().clear(),o.select(),e.getEPolygon().setStyle(e.options.style.draw),o._isHole?e.fire(s.default.hole_created):e.fire(s.default.polygon_created)}});var t=this.getVGroup();t.on("click",function(o){var r=e.getSelectedMGroup();r&&r.hasFirstMarker()||(t.onClick(o),e.msgHelper.msg(e.options.text.clickToDrawInnerEdges,null,o.layerPoint),e.fire(s.default.polygon_selected))}),this.on(s.default.delete_marker,function(){e._convertToEdit(e.getEMarkersGroup())}),this.on(s.default.delete_polygon,function(){e.getEHMarkersGroup().remove()})},_addMarker:function(e){var t=e.latlng,o=this.getEMarkersGroup(),r=o.set(t);return this._convertToEdit(o),this.fire(s.default.add_marker,{marker:r}),r},_unBindDrawEvents:function(){this.off("click"),this.getVGroup().off("click"),this.off("dblclick"),this.getDELine().clear(),this.off(s.default.join_path),this._openPopup&&delete this._openPopup}}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(e[r]=o[r])}return e},i=t.precision=function(e,t){var o=(""+e).split(".");if(t=t||0,!e||1===o.length)return e;var r=0;if(o[1].length>0){var i=o[1].length<t?o[1].length:t;r=e.toPrecision(o[0].length+i)}return Number(r)};t.precisionGeoJSON=function e(t){var o,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(null==t)throw new Error("Please, make sure that first arguments is geoJSON");if(t.features&&t.features[0]&&(t.features=t.features.map(function(t){return e(t,n)},[])),(o=r({},t)).geometry){var s=o.geometry,a=s.type,l=s.coordinates;if(!Array.isArray(l))throw new Error("Please, make sure that geoJSON has correct structure");"Polygon"===a&&n>0&&l.forEach(function(e){e.forEach(function(e){e[0]=i(e[0],n),e[1]=i(e[1],n)})}),"MultiPolygon"===a&&n>0&&l.forEach(function(e){e.forEach(function(e){e.forEach(function(e){e[0]=i(e[0],n),e[1]=i(e[1],n)})})})}return o}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(o(10)),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t}(o(1)),n=s(o(0));function s(e){return e&&e.__esModule?e:{default:e}}t.default=L.LayerGroup.extend({includes:L.Evented,_selected:!1,_lastMarker:void 0,_firstMarker:void 0,_positionHash:void 0,_lastPosition:0,_markers:[],onRemove:function(){this.clearLayers()},clearLayers:function(){var e=this;this._markers.forEach(function(t){e._map.removeLayer(t)}),this._markers=[]},addTo:function(e){e.addLayer(this)},addLayer:function(e){this._map.addLayer(e),this._markers.push(e),null!=e.position&&this._markers.move(this._markers.length-1,e.position),e.position=null!=e.position?e.position:this._markers.length-1},remove:function(){var e=this,t=this._map,o=this.getLayers();this.getDELine().clear(),o._each(function(t){for(;e.getLayers().length;)e.removeMarker(t)}),this._isHole?t.fire(n.default.hole_deleted):(t.getVGroup().removeLayer(t._getSelectedVLayer()),t.fire(n.default.polygon_deleted))},removeLayer:function(e){var t=e.position;this._map.removeLayer(e),this._markers.splice(t,1)},getLayers:function(){return this._markers},eachLayer:function(e){this._markers.forEach(e)},markerAt:function(e){var t=this._markers[e];return e<0?this.firstMarker():(void 0===t&&(t=this.lastMarker()),t)},firstMarker:function(){return this._markers[0]},lastMarker:function(){var e=this._markers;return e[e.length-1]},removeMarker:function(e){var t=!e.isMiddle(),o=e._prev,r=e._next,i=e._next._next;this.removeMarkerAt(e.position),this.removeMarkerAt(o.position),this.removeMarkerAt(r.position);var s=this._map;this.getLayers().length>0?(this.setMiddleMarker(i.position),t&&s.fire(n.default.delete_marker,{marker:e})):(this._isHole?(s.removeLayer(this),s.fire(n.default.delete_hole,{marker:e})):(s.fire(n.default.delete_polygon),s.removePolygon(s.getEPolygon())),s.fire(n.default.marker_group_clear))},removeMarkerAt:function(e){var t;if(0!==this.getLayers().length&&"number"==typeof e){t=this.markerAt(e);var o=!1,r=this._markers;if(r.forEach(function(e){o&&(e.position=0===e.position?0:e.position-1),e===t&&(t._prev._next=t._next,t._next._prev=t._prev,o=!0)}),this.removeLayer(t),r.length<5&&(this.clear(),!this._isHole)){var i=this._map;i.getEPolygon().clear(),i.getVGroup().removeLayer(i._getSelectedVLayer())}}},hasStartMarker:function(){return!!this.getLayers().some(function(e){return e._icon.classList.contains(i.firstIcon.options.className)})},addMarker:function(e,t,o){if("number"==typeof e){t=this.markerAt(e).position,this._recalcPositions(t);var i=t-1<0?this.lastMarker():this.markerAt(t-1),s=this.markerAt(-1==t?1:t);e=this._getMiddleLatLng(i,s)}var a=new r.default(this,e,o);return this._firstMarker||(this._firstMarker=a,this._lastMarker=a),void 0!==t&&(a.position=t),this.addLayer(a),a.position=void 0!==a.position?a.position:this._lastPosition++,a._prev=this._lastMarker,this._firstMarker._prev=a,a._prev&&(this._lastMarker._next=a,a._next=this._firstMarker),void 0===t&&(this._lastMarker=a),void 0!==t&&this._recalcRelations(a),a.isMiddle()||this._map.fire(n.default.before_add_marker,{marker:a}),a},clear:function(){var e=this,t=this._ids();this.clearLayers(),t.forEach(function(t){e._deleteEvents(t)}),this._lastPosition=0,this._firstMarker=void 0},_deleteEvents:function(e){delete this._map._leaflet_events.viewreset_idx[e],delete this._map._leaflet_events.zoomanim_idx[e]},_getMiddleLatLng:function(e,t){var o=this._map,r=o.project(e.getLatLng()),i=o.project(t.getLatLng());return o.unproject(r._add(i)._divideBy(2))},_recalcPositions:function(e){var t=this,o=this._markers,r=!1;o.forEach(function(o,i){e===i&&(r=!0),r&&(t._markers[i].position+=1)})},_recalcRelations:function(){var e=this,t=this._markers;t.forEach(function(o,r){o._prev=e.markerAt(r-1),o._next=e.markerAt(r+1),0===r&&(o._prev=e.lastMarker(),o._next=e.markerAt(1)),r===t.length-1&&(o._prev=e.markerAt(r-1),o._next=e.markerAt(0))})},_ids:function(){var e=[];for(var t in this._layers)e.push(t);return e.sort(function(e,t){return e-t}),e},select:function(){if(this.isEmpty())this._map&&this._map.clearSelectedMGroup();else{var e=this._map;this._isHole?(e.getEHMarkersGroup().resetSelection(),e.getEMarkersGroup().resetSelection(),e.getEHMarkersGroup().setLastHole(this)):(e.getEHMarkersGroup().resetSelection(),e.getEHMarkersGroup().resetLastHole()),this.getLayers()._each(function(e){e.enableDrag(),e.selectIconInGroup()}),this._selected=!0,this._map.setSelectedMGroup(this),this._map.fire(n.default.marker_group_select)}},isSelected:function(){return this._selected},isEmpty:function(){return 0===this.getLayers().length},resetSelection:function(){this.getLayers()._each(function(e){e.disableDrag(),e.unSelectIconInGroup()}),this._selected=!1}})},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(e[r]=o[r])}return e},n=o(1),s=o(0),a=(r=s)&&r.__esModule?r:{default:r};var l=navigator.userAgent.toLowerCase();-1===l.indexOf("ipad")&&l.indexOf("iphone"),t.default=L.Marker.extend({_draggable:void 0,_oldLatLngState:void 0,initialize:function(e,t){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};o=i({icon:n.icon,draggable:!1},o),L.Marker.prototype.initialize.call(this,t,o),this._mGroup=e,this._isFirst=0===e.getLayers().length},enableDrag:function(){this.dragging.enable()},disableDrag:function(){this.dragging.disable()},group:function(){return this._mGroup},next:function(){var e=this._next._next;return this._next.isMiddle()||(e=this._next),e},prev:function(){var e=this._prev._prev;return this._prev.isMiddle()||(e=this._prev),e},changePrevNextPos:function(){if(this._prev.isMiddle()){var e=this.group()._getMiddleLatLng(this.prev(),this),t=this.group()._getMiddleLatLng(this,this.next());this._prev.setLatLng(e),this._next.setLatLng(t)}},_resetIcon:function(e){if(!this._hasFirstIcon()){var t=e||n.icon;this.setIcon(t),this.prev().setIcon(t),this.next().setIcon(t)}},_addIconClass:function(e){L.DomUtil.addClass(this._icon,e)},_removeIconClass:function(e){L.DomUtil.removeClass(this._icon,e)},_hasFirstIcon:function(){return this._icon&&L.DomUtil.hasClass(this._icon,"m-editor-div-icon-first")},isMiddle:function(){return this._icon&&L.DomUtil.hasClass(this._icon,"m-editor-middle-div-icon")&&!L.DomUtil.hasClass(this._icon,"leaflet-drag-target")},_setDragIcon:function(){this._removeIconClass("m-editor-div-icon"),this._removeIconClass("m-editor-middle-div-icon"),this._addIconClass("m-editor-div-icon-drag"),this.update()},isPlain:function(){return L.DomUtil.hasClass(this._icon,"m-editor-div-icon")},_onceClick:function(){var e=this;this._isFirst&&this.once("click",function(t){if(e._hasFirstIcon()){var o=e._map,r=e.group();r._markers.length<3?e._onceClick():(e._isFirst=!1,e.setIcon(n.icon),o.fire(a.default.join_path,{mGroup:r}))}})},isAcceptedToDelete:function(){return this._map.options.notifyClickMarkerDeletePolygon&&!this.isMiddle()&&this.isSelectedInGroup()&&this._map.getSelectedMarker()===this&&this.group().hasMinimalMarkersLength()},needAcceptToDelete:function(){return this._map.options.notifyClickMarkerDeletePolygon&&!this.isMiddle()&&this.isSelectedInGroup()&&this._map.getSelectedMarker()!==this&&this.group().hasMinimalMarkersLength()},_disallowToExecuteEvent:function(){var e=this._map,t=void 0;return e&&(t=e.getSelectedMGroup()),t&&t.hasFirstMarker()&&t!==this.group()},_bindEvents:function(){var e=this;this.on("dragstart",function(t){e._setDragIcon(),e.group().setSelected(e),e._oldLatLngState=t.target._latlng,e._prev.isPlain()&&e.group().setMiddleMarkers(e.position),e._map.fire(a.default.marker_dragstart),e.__dragging=!0}),this.on("click",function(){var t=e.group(),o=e._map;if(!e._disallowToExecuteEvent()){if(e.needAcceptToDelete())return t.setSelected(e),void o.msgHelper.msg(o.options.text.acceptDeletion,"error",e);if(!(t.hasFirstMarker()&&e!==t.getFirst()||e._hasFirstIcon()||(t.setSelected(e),e._hasFirstIcon()||t.getFirst()._hasFirstIcon())))return e.isSelectedInGroup()?void(e.isMiddle()?(t.setMiddleMarkers(e.position),e._resetIcon(n.icon),t.select(),o.msgHelper.msg(o.options.text.clickToRemoveAllSelectedEdges,null,e),o.clearSelectedMarker()):t.getFirst()._hasFirstIcon()||(o.msgHelper.hide(),t.removeMarker(e),t.isEmpty()&&(t._isHole?o.fire(a.default.hole_deleted):o.fire(a.default.polygon_deleted),o.msgHelper.hide()),t.select())):(t.select(),e.isMiddle()?o.msgHelper.msg(o.options.text.clickToAddNewEdges,null,e):o.msgHelper.msg(o.options.text.clickToRemoveAllSelectedEdges,null,e),void(e.isAcceptedToDelete()&&o.msgHelper.msg(o.options.text.acceptDeletion,"error",e)))}}),this.on("mousedown",function(){if(!e.dragging._enabled)return!1}),this.on("mouseover",function(t){t.originalEvent.stopPropagation();var o=e._map.getSelectedMarker(),r=!(!o||!o.__dragging);if(!e._disallowToExecuteEvent()&&!r){var i=e._map;e.group().getFirst()._hasFirstIcon()?e.group().getLayers().length>2&&(e._hasFirstIcon()?i.fire(a.default.first_marker_mouseover,{marker:e}):e===e.group()._lastMarker&&i.fire(a.default.last_marker_dblclick_mouseover,{marker:e})):e.isSelectedInGroup()?e.isMiddle()?i.fire(a.default.selected_middle_marker_mouseover,{marker:e}):i.fire(a.default.selected_marker_mouseover,{marker:e}):i.fire(a.default.not_selected_marker_mouseover,{marker:e}),e.isAcceptedToDelete()&&i.msgHelper.msg(i.options.text.acceptDeletion,"error",e)}}),this.on("mouseout",function(t){t.originalEvent.stopPropagation();var o=e._map.getSelectedMarker(),r=!(!o||!o.__dragging);e._disallowToExecuteEvent()||r||e._map.fire(a.default.marker_mouseout)}),this._onceClick(),this.on("dblclick",function(){if(!e._disallowToExecuteEvent()){var t=e.group();t&&t.getFirst()&&t.getFirst()._hasFirstIcon()&&e===t._lastMarker&&t.getFirst().fire("click")}}),this.on("drag",function(t){e._onDrag(t)}),this.on("dragend",function(t){e._onDragEnd(t)})},onAdd:function(e){L.Marker.prototype.onAdd.call(this,e),this._bindEvents(e)},_onDrag:function(e){e.target.changePrevNextPos();var t=this._map;t._convertToEdit(t.getEMarkersGroup()),this._setDragIcon(),t.fire(a.default.drag_marker,{marker:this})},_onDragEnd:function(){var e=this;setTimeout(function(){e.group().select(),e._map.fire(a.default.dragend_marker,{marker:e}),e._map.fire(a.default.selected_marker_mouseover,{marker:e}),e.resetStyle()},1)},resetIcon:function(){this._removeIconClass("m-editor-div-icon-drag")},unSelectIconInGroup:function(){this._removeIconClass("group-selected")},_selectIconInGroup:function(){this.isMiddle()||this._addIconClass("m-editor-div-icon"),this._addIconClass("group-selected")},selectIconInGroup:function(){this._prev&&this._prev._selectIconInGroup(),this._selectIconInGroup(),this._next&&this._next._selectIconInGroup()},isSelectedInGroup:function(){return L.DomUtil.hasClass(this._icon,"group-selected")},onRemove:function(e){this.off("mouseout"),L.Marker.prototype.onRemove.call(this,e)},resetStyle:function(){this.resetIcon(),this.selectIconInGroup()}})},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=this;this.touchZoom.disable(),this.doubleClickZoom.disable(),this.boxZoom.disable(),this.keyboard.disable();var t=this.msgHelper=new r.default({defaultMsg:this.options.text.clickToStartDrawPolygonOnMap});this.on("msgHelperAdded",function(){var o=e.options.text;e.on(n.default.marker_group_select,function(){e.off(n.default.not_selected_marker_mouseover),e.on(n.default.not_selected_marker_mouseover,function(e){t.msg(o.clickToSelectEdges,null,e.marker)}),e.off(n.default.selected_marker_mouseover),e.on(n.default.selected_marker_mouseover,function(e){t.msg(o.clickToRemoveAllSelectedEdges,null,e.marker)}),e.off(n.default.selected_middle_marker_mouseover),e.on(n.default.selected_middle_marker_mouseover,function(e){t.msg(o.clickToAddNewEdges,null,e.marker)}),e.off(n.default.edit_polygon_mousemove),e.on(n.default.edit_polygon_mousemove,function(e){t.msg(o.clickToDrawInnerEdges,null,e.layerPoint)}),e.off(n.default.edit_polygon_mouseout),e.on(n.default.edit_polygon_mouseout,function(){t.hide()}),e.off(n.default.view_polygon_mousemove),e.on(n.default.view_polygon_mousemove,function(r){var i;(i=e.getSelectedMGroup())&&i.hasFirstMarker()?t.hide():t.msg(o.clickToEdit,null,r.layerPoint)}),e.off(n.default.view_polygon_mouseout),e.on(n.default.view_polygon_mouseout,function(){t.hide()})}),e.off(n.default.marker_mouseout),e.on(n.default.marker_mouseout,function(){t.hide()}),e.on(n.default.marker_dragstart,function(){t.hide()}),e.off(n.default.first_marker_mouseover),e.on(n.default.first_marker_mouseover,function(e){t.msg(o.clickToJoinEdges,null,e.marker)}),e.off(n.default.last_marker_dblclick_mouseover),e.on(n.default.last_marker_dblclick_mouseover,function(e){t.msg(o.dblclickToJoinEdges,null,e.marker)}),e.on(n.default.join_path,function(o){o.marker&&t.msg(e.options.text.clickToRemoveAllSelectedEdges,null,o.marker)})}),i.default.isMobileBrowser()||this.addControl(t)};var r=s(o(12)),i=s(o(3)),n=s(o(0));function s(e){return e&&e.__esModule?e:{default:e}}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=L.Control.extend({options:{position:"msgcenter",defaultMsg:null},_onResizeEvent:null,_titleContainer:null,initialize:function(e){L.Util.setOptions(this,e)},onAdd:function(e){var t=L.DomUtil.create("div","leaflet-bottom"),o=L.DomUtil.create("div","leaflet-msg-editor");return e._controlCorners.msgcenter=t,e._controlContainer.appendChild(t),this._setContainer(o,e),e.fire("msgHelperAdded",{control:this}),this._changePos(),this._bindEvents(e),o},onRemove:function(){this._unBindEvents(),document.querySelectorAll(".leaflet-msg-container").forEach(function(e){document.body.removeChild(e)})},_changePos:function(){if(this._map){var e=this._map._controlCorners.msgcenter;if(e&&e.children.length){var t=e.children[0].children[0];if(!t)return;var o=t.clientWidth;o&&(e.style.left=(this._map._container.clientWidth-o)/2+"px")}}else this._unBindEvents()},_unBindEvents:function(){window.removeEventListener("resize",this._onResizeEvent)},_bindEvents:function(){this._onResizeEvent=this._changePos.bind(this),window.addEventListener("resize",this._onResizeEvent)},_setContainer:function(e){this._titleContainer=L.DomUtil.create("div","leaflet-msg-container title-hidden"),this._titlePosContainer=L.DomUtil.create("div","leaflet-msg-container title-hidden"),e.appendChild(this._titleContainer),document.body.appendChild(this._titlePosContainer),null!==this.options.defaultMsg&&(L.DomUtil.removeClass(this._titleContainer,"title-hidden"),this._titleContainer.innerHTML=this.options.defaultMsg)},getOffset:function(e){var t=0,o=0;if(!this._map.isFullscreen||!this._map.isFullscreen())for(;e&&!isNaN(e.offsetLeft)&&!isNaN(e.offsetTop);)t+=e.offsetLeft,o+=e.offsetTop,e=e.offsetParent;return{y:o,x:t}},msg:function(e,t,o){if(e&&this._titlePosContainer)if(o){var r;L.DomUtil.removeClass(this._titlePosContainer,"title-hidden"),L.DomUtil.removeClass(this._titlePosContainer,"title-error"),L.DomUtil.removeClass(this._titlePosContainer,"title-success"),this._titlePosContainer.innerHTML=e;var i=this.getOffset(this._map._container);o instanceof L.Point?(r=o,r=this._map.layerPointToContainerPoint(r)):r=this._map.latLngToContainerPoint(o.getLatLng()),r.x+=i.x,r.y+=i.y,this._titlePosContainer.style.top=r.y-8+"px",this._titlePosContainer.style.left=r.x+10+"px",t&&L.DomUtil.addClass(this._titlePosContainer,"title-"+t)}else L.DomUtil.removeClass(this._titleContainer,"title-hidden"),L.DomUtil.removeClass(this._titleContainer,"title-error"),L.DomUtil.removeClass(this._titleContainer,"title-success"),this._titleContainer.innerHTML=e,t&&L.DomUtil.addClass(this._titleContainer,"title-"+t),this._changePos()},hide:function(){this._titleContainer&&L.DomUtil.addClass(this._titleContainer,"title-hidden"),this._titlePosContainer&&L.DomUtil.addClass(this._titlePosContainer,"title-hidden")},getBtnContainer:function(){return this._map._controlCorners.msgcenter},getBtnAt:function(e){return this.getBtnContainer().child[e]},disableBtn:function(e){L.DomUtil.addClass(this.getBtnAt(e),"disabled")},enableBtn:function(e){L.DomUtil.removeClass(this.getBtnAt(e),"disabled")}})},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Array.prototype.move=function(e,t){this.splice(t,0,this.splice(e,1)[0])},Array.prototype._each=function(e){for(var t=this.length,o=0;o<t;o++)e.call(this,this[o],o)},t.default=Array},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(e[r]=o[r])}return e},n=o(0),s=(r=n)&&r.__esModule?r:{default:r};t.default=L.FeatureGroup.extend({initialize:function(e){var t=this,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};L.FeatureGroup.prototype.initialize.call(this,e,o),this.on("layeradd",function(e){var o=t._map.options.style.view;e.target.setStyle(i({opacity:.7,fillOpacity:.35,color:"#00ABFF"},o)),t._map._moveEPolygonOnTop()})},isEmpty:function(){return 0===this.getLayers().length},onAdd:function(e){L.FeatureGroup.prototype.onAdd.call(this,e),this.on("mousemove",function(t){e.fire(s.default.view_polygon_mousemove,{layerPoint:t.layerPoint})}),this.on("mouseout",function(){e.fire(s.default.view_polygon_mouseout)})},onClick:function(e){L.DomEvent.stopPropagation(e);var t=this._map,o=t.getSelectedMGroup(),r=t.getEMarkersGroup();if(o&&o.getFirst()&&o.getFirst()._hasFirstIcon()&&!o.isEmpty()){var i=t.getEMarkersGroup();i.set(e.latlng),t._convertToEdit(i)}else t._getSelectedVLayer()?t._setEPolygon_To_VGroup():t._addEPolygon_To_VGroup(),t.clear(),t.mode("draw"),t._hideSelectedVLayer(e.layer),r.restore(e.layer),t._convertToEdit(r),r.select()},onRemove:function(e){this.off("mouseover"),this.off("mouseout"),e.off(s.default.view_polygon_mousemove),e.off(s.default.view_polygon_mouseout)}})},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=L.FeatureGroup.extend({})},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(o(17)),i=n(o(0));function n(e){return e&&e.__esModule?e:{default:e}}t.default=L.EditPloygon=r.default.extend({_oldE:void 0,_k:1,initialize:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[[0,0]],t=arguments[1];L.Polygon.prototype.initialize.call(this,e,t),this.options.className="leaflet-clickable editable-polygon"},_updateMarker:function(e){var t=e.marker;if(t._mGroup._isHole){var o=t._mGroup._markers;o=o.filter(function(e){return!e.isMiddle()}),this._latlngs[t._mGroup.position+1]=o.map(function(e){return e.getLatLng()})}this.redraw()},_removeHole:function(e){var t=e.marker._mGroup.position;this._latlngs.splice(t+1,1);var o=this._map.getEHMarkersGroup();o.removeLayer(e.marker._mGroup._leaflet_id),o.repos(e.marker._mGroup.position),this.redraw()},onAdd:function(e){var t=this;L.Polyline.prototype.onAdd.call(this,e),e.off(i.default.before_add_marker),e.on(i.default.before_add_marker,function(e){return t._updateMarker(e)}),e.off(i.default.drag_marker),e.on(i.default.drag_marker,function(e){return t._updateMarker(e)}),e.off(i.default.delete_marker),e.on(i.default.delete_marker,function(e){return t._updateMarker(e)}),e.off(i.default.delete_hole),e.on(i.default.delete_hole,function(e){return t._removeHole(e)}),this.on("mousemove",function(t){e.fire(i.default.edit_polygon_mousemove,{layerPoint:t.layerPoint})}),this.on("mouseout",function(){return e.fire(i.default.edit_polygon_mouseout)})},onRemove:function(e){this.off("mousemove"),this.off("mouseout"),e.off(i.default.edit_polygon_mouseover),e.off(i.default.edit_polygon_mouseout),L.Polyline.prototype.onRemove.call(this,e)},addHole:function(e){this._latlngs.push(e),this.redraw()},hasHoles:function(){return this._latlngs.length>1}})},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=L.Polygon.extend({isEmpty:function(){var e=this.getLatLngs();return null==e||e&&0===e.length||"LatLng(0, 0),LatLng(0, 0)"===e.toString()||"LatLng(0, 0)"===e.toString()},_isHiddenData:!0,setLatLngs:function(e){this._isHiddenData&&(this._isHiddenData=!0),L.Polygon.prototype.setLatLngs.call(this,e)},addLatLng:function(e){this._isHiddenData&&(this._isHiddenData=!0),L.Polygon.prototype.addLatLng.call(this,e)},getHoles:function(){var e,t=this.getLatLngs(),o=(e=t,Array.isArray(e)?e:Array.from(e));o[0];return o.slice(1)},clearHoles:function(){this._latlngs=this._latlngs[0]?[this._latlngs[0]]:[],this.redraw()},clear:function(){this.clearHoles(),Array.isArray(this._latlngs)&&void 0!==this._latlngs[0]&&(this._isHiddenData=!0,this.setLatLngs([[0,0],[0,0]]))}})},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(e[r]=o[r])}return e},n=o(4),s=(r=n)&&r.__esModule?r:{default:r};var a=i(s.default.style.drawLine,{className:"dash-line"});t.default=L.Polyline.extend({options:i(s.default.style.drawLine,{className:"dash-line"}),_latlngToMove:void 0,_isHiddenLine:!0,initialize:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[[0,0]],t=arguments[1];return"0,0"===e.toString()&&(this._isHiddenLine=!0,this.setStyle({opacity:0})),L.Polyline.prototype.initialize.call(this,e,t),this},addLatLng:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a;return this._isHiddenLine&&(this._isHiddenLine=!1,this.setLatLngs([e])),this.setStyle(t),this._latlngToMove&&(this._latlngToMove=void 0),this._latlngs.length>1&&this._latlngs.splice(-1),this._latlngs.push(L.latLng(e)),this.redraw()},update:function(e){return!this._latlngToMove&&this._latlngs.length&&(this._latlngToMove=L.latLng(e),this._latlngs.push(this._latlngToMove)),this._latlngToMove&&(this._latlngToMove.lat=e.lat,this._latlngToMove.lng=e.lng,this.redraw()),this},_addLine:function(e,t,o){o||e.addTo(t)},clear:function(){this.setLatLngs([])}})},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=o(2),n=(r=i)&&r.__esModule?r:{default:r};t.default=L.FeatureGroup.extend({_selected:!1,_lastHole:void 0,_lastHoleToDraw:void 0,addHoleGroup:function(){return this._lastHole=new n.default,this._lastHole._isHole=!0,this._lastHole.addTo(this),this._lastHole.position=this.getLength()-1,this._lastHoleToDraw=this._lastHole,this._lastHole},getLength:function(){return this.getLayers().length},resetLastHole:function(){this._lastHole=void 0},setLastHole:function(e){this._lastHole=e},getLastHole:function(){return this._lastHole},remove:function(){this.eachLayer(function(e){for(;e.getLayers().length;)e.removeMarkerAt(0)})},repos:function(e){this.eachLayer(function(t){t.position>=e&&(t.position-=1)})},resetSelection:function(){this.eachLayer(function(e){e.resetSelection()}),this._selected=!1},clear:function(){var e=this;this.eachLayer(function(t){t._markers&&t.clear(),e.removeLayer(t)})}})},function(e,t,o){"use strict";var r,i=o(5),n=(r=i)&&r.__esModule?r:{default:r};window.LeafletEditor=n.default}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,